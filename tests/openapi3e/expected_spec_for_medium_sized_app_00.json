{
  "components": {
    "responses": {
      "200": {
        "description": "OK"
      },
      "400": {
        "description": "Bad Request"
      },
      "404": {
        "description": "Not Found"
      },
      "500": {
        "description": "Internal Server Error"
      }
    },
    "schemas": {
      "int.min4": {
        "description": "Minimum: 4",
        "format": "int32",
        "minimum": 4,
        "title": "int.min4",
        "type": "integer"
      },
      "str.min4": {
        "description": "A string of len >= 4",
        "minimum": 4,
        "title": "str.min4",
        "type": "string"
      }
    }
  },
  "info": {
    "description": "Description",
    "title": "API",
    "version": "v1.0.0"
  },
  "openapi": "3.0.2",
  "paths": {
    "/109/some_ids": {
      "get": {
        "operationId": "testSomeIds",
        "parameters": [
          {
            "description": "Some IDs",
            "in": "query",
            "name": "ids",
            "required": true,
            "schema": {
              "enum": [
                1,
                3,
                5,
                7,
                11,
                13
              ],
              "items": {
                "type": "integer"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/123/post_some_ids": {
      "post": {
        "operationId": "testPostSomeIds",
        "parameters": [
          {
            "description": "Some IDs",
            "in": "query",
            "name": "ids",
            "required": true,
            "schema": {
              "enum": [
                1,
                3,
                5,
                7,
                11,
                13
              ],
              "items": {
                "type": "integer"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/137/put_some_ids": {
      "put": {
        "operationId": "testPutSomeIds",
        "parameters": [
          {
            "description": "Some IDs",
            "in": "query",
            "name": "ids",
            "required": true,
            "schema": {
              "enum": [
                1,
                3,
                5,
                7,
                11,
                13
              ],
              "items": {
                "type": "integer"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/151/options_some_ids": {
      "options": {
        "operationId": "testOptionsSomeIds",
        "parameters": [
          {
            "description": "Some IDs",
            "in": "query",
            "name": "ids",
            "required": true,
            "schema": {
              "enum": [
                1,
                3,
                5,
                7,
                11,
                13
              ],
              "items": {
                "type": "integer"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/165/delete_some_ids": {
      "delete": {
        "operationId": "testDeleteSomeIds",
        "parameters": [
          {
            "description": "Some IDs",
            "in": "query",
            "name": "ids",
            "required": true,
            "schema": {
              "enum": [
                1,
                3,
                5,
                7,
                11,
                13
              ],
              "items": {
                "type": "integer"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/179/head_some_ids": {
      "head": {
        "operationId": "testHeadSomeIds",
        "parameters": [
          {
            "description": "Some IDs",
            "in": "query",
            "name": "ids",
            "required": true,
            "schema": {
              "enum": [
                1,
                3,
                5,
                7,
                11,
                13
              ],
              "items": {
                "type": "integer"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/194/patch_some_ids": {
      "patch": {
        "operationId": "testPatchSomeIds",
        "parameters": [
          {
            "description": "Some IDs",
            "in": "query",
            "name": "ids",
            "required": true,
            "schema": {
              "enum": [
                1,
                3,
                5,
                7,
                11,
                13
              ],
              "items": {
                "type": "integer"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/41/test_id/{an_id}": {
      "get": {
        "operationId": "testId",
        "parameters": [
          {
            "description": "An ID",
            "in": "path",
            "name": "an_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": [
          "Tag 1"
        ]
      }
    },
    "/47/test_id_min/{an_id}": {
      "get": {
        "operationId": "testIdMin",
        "parameters": [
          {
            "description": "An ID",
            "in": "path",
            "name": "an_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/int.min4"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "You got a 200!",
            "headers": {
              "x-prize": {
                "allowEmptyValue": false,
                "allowReserved": false,
                "description": "free money",
                "explode": false,
                "required": false
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/55/test_id_examples/{an_id}": {
      "get": {
        "description": "Unfortunately, the swagger UIs do not show the examples, but you can see them here:\n\n* `{'small': Example({\"description\": \"Desc: Numbers less than ten\", \"summary\": \"A small number\", \"value\": 7})}`,\n* `{'big': Example({\"description\": \"Desc: Numbers more than one million!\", \"summary\": \"A big number\", \"value\": 123456789})}`",
        "operationId": "testIdExamples",
        "parameters": [
          {
            "description": "An ID",
            "examples": {
              "big": {
                "description": "Desc: Numbers more than one million!",
                "summary": "A big number",
                "value": 123456789
              },
              "small": {
                "description": "Desc: Numbers less than ten",
                "summary": "A small number",
                "value": 7
              }
            },
            "in": "path",
            "name": "an_id",
            "required": true,
            "schema": {
              "description": "Minimum value: 4",
              "format": "int32",
              "minimum": 4,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "A path with parameter examples"
      }
    },
    "/74/test_path__deprecated/{an_id}/{another}": {
      "get": {
        "deprecated": true,
        "description": "This should be marked as being deprecated",
        "operationId": "pathDeprecated",
        "parameters": [
          {
            "description": "An ID",
            "examples": {
              "big": {
                "description": "Desc: Numbers more than one million!",
                "summary": "A big number",
                "value": 123456789
              },
              "small": {
                "description": "Desc: Numbers less than ten",
                "summary": "A small number",
                "value": 7
              }
            },
            "in": "path",
            "name": "an_id",
            "required": true,
            "schema": {
              "description": "Minimum value: 4",
              "format": "int32",
              "minimum": 4,
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "another",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "A path with parameter examples"
      }
    },
    "/90/test_parameter__deprecated/{an_id}": {
      "get": {
        "description": "The parameter should be marked as deprecated",
        "operationId": "paramDeprecated",
        "parameters": [
          {
            "deprecated": true,
            "description": "An ID",
            "in": "path",
            "name": "an_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "summary": "A path deprecated parameter"
      }
    }
  },
  "tags": [
    {
      "description": "A tag desc",
      "name": "Tag 1"
    }
  ]
}